import requests
import json
import time
import os
import platform

# --- C·∫§U H√åNH ---
# Danh s√°ch c√°c ƒë·ªãa ch·ªâ IP v√† t√™n m√¥ t·∫£
IP_ADDRESSES = {
    "10.30.12.42": "(G·∫ßn VB30)",
    "10.30.12.41": "(Gi·ªØa 2 ph√≤ng MRI)",
    "10.30.12.36": "(T·∫ßng 1)",
    "10.30.12.37": "(T·∫ßng 2)"
}
API_ENDPOINT = "/Home/GetPrinterStatus"
MAX_RETRIES = 5  
RETRY_DELAY = 3  

# Headers ƒë·∫ßy ƒë·ªß ƒë·ªÉ m√¥ ph·ªèng tr√¨nh duy·ªát v√† y√™u c·∫ßu AJAX
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
    'Content-Type': 'application/json; charset=utf-8',
    'X-Requested-With': 'XMLHttpRequest',
}

# --- CH·ª®C NƒÇNG PING ---

def check_ping(ip_address):
    """
    Ki·ªÉm tra tr·∫°ng th√°i ping c·ªßa m·ªôt ƒë·ªãa ch·ªâ IP.
    Tr·∫£ v·ªÅ True n·∫øu ping th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i.
    """
    # -n 1 l√† cho Windows (ch·ªâ g·ª≠i 1 g√≥i tin)
    # -c 1 l√† cho Linux/macOS
    param = '-n 1' if platform.system().lower() == 'windows' else '-c 1'
    # G·ª≠i l·ªánh v√† chuy·ªÉn h∆∞·ªõng ƒë·∫ßu ra ƒë·ªÉ gi·ªØ console s·∫°ch h∆°n
    command = f"ping {param} {ip_address} > nul 2>&1"
    
    # os.system tr·∫£ v·ªÅ 0 n·∫øu l·ªánh th√†nh c√¥ng
    return os.system(command) == 0

# --- LOGIC C√ÄO D·ªÆ LI·ªÜU ---

def print_tray_data(data, tray_name, data_prefix):
    """H√†m in d·ªØ li·ªáu khay (lo·∫°i b·ªè Middle Tray)."""
    if tray_name == "Middle Tray":
        return

    if data.get(f'{data_prefix}Visible_Value'):
        print(f"‚ñ∂Ô∏è {tray_name}:")
        print(f"  Lo·∫°i Phim: {data.get(f'{data_prefix}FilmType_Value', 'N/A').strip()}")
        print(f"  S·ªë L∆∞·ª£ng: {data.get(f'{data_prefix}FilmCount_Value', 'N/A').strip()}")
        print(f"  Tr·∫°ng Th√°i: {data.get(f'{data_prefix}FilmStatus_Value', 'N/A').strip()}")
    else:
        if tray_name in ["Upper Tray", "Lower Tray"]:
             print(f"‚ñ∂Ô∏è {tray_name}: Kh√¥ng hi·ªÉn th·ªã.")

def get_printer_status_for_ip(ip_address):
    """Th·ª±c hi·ªán c√†o d·ªØ li·ªáu v·ªõi logic t·ª± ƒë·ªông h√≥a phi√™n v√† th·ª≠ l·∫°i."""
    URL_BASE = f"http://{ip_address}"
    print(f"\n--- B·∫Øt ƒë·∫ßu c√†o d·ªØ li·ªáu ---")
    
    with requests.Session() as session:
        session.headers.update(headers)
        response_get = None
        
        # B∆Ø·ªöC 1: GET trang ch·ªß ƒë·ªÉ t·∫°o Session ID, th·ª≠ l·∫°i n·∫øu l·ªói 500
        for attempt in range(MAX_RETRIES):
            try:
                response_get = session.get(URL_BASE + '/', timeout=10)
                if response_get.status_code == 200:
                    break
                elif response_get.status_code == 500:
                    time.sleep(RETRY_DELAY)
                else:
                    print(f"‚ùå GET L·ªñI: M√£ tr·∫°ng th√°i {response_get.status_code}. B·ªè qua IP n√†y.")
                    return
            except requests.exceptions.RequestException:
                time.sleep(RETRY_DELAY)
        
        if not response_get or response_get.status_code != 200:
            print("‚ùå Thi·∫øt l·∫≠p phi√™n th·∫•t b·∫°i. Kh√¥ng th·ªÉ truy c·∫≠p API.")
            return

        # B∆Ø·ªöC 2: G·ª≠i POST API ƒë·ªÉ l·∫•y D·ªØ li·ªáu
        try:
            response_post = session.post(URL_BASE + API_ENDPOINT, data='{}', timeout=10)
            
            if response_post.status_code == 200:
                data = response_post.json()
                if data.get('Return_Successful'):
                    print("\n--- K·∫æT QU·∫¢ TR·∫†NG TH√ÅI ---")
                    print_tray_data(data, "Upper Tray", "UpperTray_")
                    print_tray_data(data, "Lower Tray", "LowerTray_")
                else:
                    print(f"‚ùå L·ªói ·ª©ng d·ª•ng (JSON): {data.get('Return_Error_Message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')}")
            else:
                print(f"‚ùå POST L·ªñI: M√£ tr·∫°ng th√°i {response_post.status_code}. D·ª´ng.")
                
        except (requests.exceptions.RequestException, json.JSONDecodeError) as e:
            print(f"‚ùå L·ªói trong b∆∞·ªõc POST: {e}")

# --- CH∆Ø∆†NG TR√åNH CH√çNH V·ªöI MENU ---

def main_menu():
    """Hi·ªÉn th·ªã menu v√† x·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng."""
    ip_list = list(IP_ADDRESSES.keys()) # L·∫•y danh s√°ch IP theo th·ª© t·ª±

    while True:
        print("\n========================================================")
        print("          MENU KI·ªÇM TRA TR·∫†NG TH√ÅI M√ÅY IN")
        print("========================================================")
        
        # In danh s√°ch IP k√®m t√™n m√¥ t·∫£
        for i, ip in enumerate(ip_list):
            description = IP_ADDRESSES[ip]
            print(f"[{i + 1}] {ip} {description}")
            
        print("[P] Ki·ªÉm tra PING t·∫•t c·∫£")
        print("[A] C√†o D·ªÆ LI·ªÜU t·∫•t c·∫£")
        print("[Q] Tho√°t")
        print("--------------------------------------------------------")
        
        choice = input("Vui l√≤ng ch·ªçn IP (s·ªë) ho·∫∑c ch·ª©c nƒÉng (P/A/Q): ").upper().strip()

        if choice == 'Q':
            print("ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.")
            break
        
        elif choice == 'P':
            print("\n--- K·∫æT QU·∫¢ PING T·∫§T C·∫¢ ---")
            for ip in ip_list:
                description = IP_ADDRESSES[ip]
                status = "‚úÖ ONLINE" if check_ping(ip) else "‚ùå OFFLINE"
                print(f"{ip} {description}: {status}")

        elif choice == 'A':
            print("\n--- B·∫ÆT ƒê·∫¶U C√ÄO D·ªÆ LI·ªÜU T·∫§T C·∫¢ ---")
            for ip in ip_list:
                description = IP_ADDRESSES[ip]
                print(f"\nüöÄ X·ª¨ L√ù IP: {ip} {description}")
                get_printer_status_for_ip(ip)

        elif choice.isdigit() and 1 <= int(choice) <= len(ip_list):
            selected_ip = ip_list[int(choice) - 1]
            description = IP_ADDRESSES[selected_ip]
            print(f"\n--- X·ª¨ L√ù IP ƒê√É CH·ªåN: {selected_ip} {description} ---")
            
            # H·ªèi ng∆∞·ªùi d√πng mu·ªën l√†m g√¨ v·ªõi IP ƒë√£ ch·ªçn
            action = input("Ch·ªçn h√†nh ƒë·ªông: [P]ing / [C]√†o D·ªØ li·ªáu: ").upper().strip()
            
            if action == 'P':
                status = "‚úÖ ONLINE" if check_ping(selected_ip) else "‚ùå OFFLINE"
                print(f"{selected_ip} {description}: {status}")
            elif action == 'C':
                get_printer_status_for_ip(selected_ip)
            else:
                print("L·ª±a ch·ªçn h√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá.")

        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")

if __name__ == "__main__":
    main_menu()